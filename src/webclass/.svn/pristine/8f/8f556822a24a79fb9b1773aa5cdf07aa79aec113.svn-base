package com.qiancloud.webclass.util;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * HttpClient简单工具类
 * 
 */
public class HttpClientHelper {
	
	/** 连接超时时间 */
    public static final int CONN_TIME_OUT = 60 * 1000;
    
    /** 响应超时时间 */
    public static final int RESP_TIME_OUT = 60 * 1000;
    
    /** 编码格式 */
    public static final String charset = "UTF-8";
    
    /** HttpClient对象 */
    private static CloseableHttpClient client = null;
    
    private static final Logger log = LoggerFactory.getLogger(HttpClientHelper.class);
    
    static {
        PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();
        // 最大连接数
        cm.setMaxTotal(128);
        // 基础连接数
        cm.setDefaultMaxPerRoute(128);
        // 初始化
        client = HttpClients.custom().setConnectionManager(cm).build();
    }

    /**
     *	配置连接的超时时间
     * 
     * @param requestBase
     */
    private static void config(HttpRequestBase requestBase){
    	RequestConfig config = RequestConfig.custom()
    							.setConnectionRequestTimeout(CONN_TIME_OUT)
								.setConnectTimeout(CONN_TIME_OUT)
								.setSocketTimeout(RESP_TIME_OUT)
								.build();
    	requestBase.setConfig(config);
    }
    
    /**
     * 	封装post请求的参数
     * 
     * @param httpost
     * @param params
     */
    private static void setPostParams(HttpPost httpost,
            Map<String, Object> params) {
        List<NameValuePair> nvps = new ArrayList<NameValuePair>();
        Set<String> keySet = params.keySet();
        for (String key : keySet) {
            nvps.add(new BasicNameValuePair(key, params.get(key).toString()));
        }
        try {
            httpost.setEntity(new UrlEncodedFormEntity(nvps, charset));
        } catch (UnsupportedEncodingException e) {
        	log.error("不支持的编码格式异常:{}", e);
        }
    }
    

    /**
     * 发送一个post请求
     * 
     * @param url
     * @param params
     * @return
     * @throws Exception
     */
    public static String postReq(String url, Map<String, Object> params) throws Exception{
    	HttpPost httppost = new HttpPost(url);
        config(httppost);
        setPostParams(httppost, params);
        CloseableHttpResponse response = null;
        try {
            response = (CloseableHttpResponse) client.execute(httppost);
            HttpEntity entity = response.getEntity();
            String result = EntityUtils.toString(entity, charset);
            EntityUtils.consume(entity);	// 关闭资源
            return result;
        } catch (Exception e) {
        	log.error("发送post请求异常,请求详情:{}", new Object[]{url, params}, e);
        	throw e;
        } finally {
        	if (response != null) {
				try {
					response.close();
				} catch (IOException e) {
					log.error("发送post请求关闭响应I/O异常", e);
				}
			}
        }
    }  
    
    
    /**
     * 	发送一个get请求
     * 
     * @param url
     * @return
     * @throws IOException
     */
    public static String getReq(String url) throws IOException {
        HttpGet httpget = new HttpGet(url);
        config(httpget);
        CloseableHttpResponse response = null;
        try {
            response = client.execute(httpget);
            HttpEntity entity = response.getEntity();
            String result = EntityUtils.toString(entity, charset);
            EntityUtils.consume(entity);
            return result;
        } catch (IOException e) {
            log.error("发送get请求异常,请求url:{}", url, e);
            throw e;
        } finally {
            if (response != null){
            	try {
					response.close();
				} catch (Exception e) {
					log.error("发送get请求关闭响应I/O异常", e);
				}
            }
        }
    }
    
}
