package com.qiancloud.webclass.util;

import java.io.UnsupportedEncodingException;
import java.util.Random;

import org.apache.commons.codec.binary.Base64;


public class StringEncrypt {
	
	/**
	 * 获取Base64编码后的解密字符串
	 * 
	 * @param key
	 * @param base64Str base64编码后的字符串
	 * @return 原文
	 */
	public static String decrypt(String key, String base64Str) {
		byte[] byteDecode = Base64.decodeBase64(base64Str);
		String strDecrypt = DecryptByteToString(key, byteDecode);
		return strDecrypt;
	}
	
	/**
	 * 获取Base64编码后的加密字符串
	 * 
	 * @param key
	 * @param strText
	 * @return base64EncryptStr
	 */
	public static String encrypt(String key, String strText) {
		byte[] byteEncrypt = EncryptStringToByte(key, strText);// 加密
		String base64EncryptStr = Base64.encodeBase64String(byteEncrypt);// base64编码
		return base64EncryptStr;
	}
	
	/**
	 * 加密
	 * 
	 * @param strKey
	 * @param strText
	 * @return
	 */
	public static byte[] EncryptStringToByte(String strKey, String strText) {
		if (strKey.length() <= 0 || strText.length() <= 0)
			return null;
		byte[] byteKey = strKey.getBytes();
		byte[] byteText = null;
		try {
			byteText = strText.getBytes("utf-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		int nTextLen = byteText.length;
		int nKeyLen = byteKey.length;
		Random ran = new Random();
		int nRandKey = ran.nextInt();
		nRandKey = nRandKey % 255;
		byte Rand = (byte) nRandKey;
		byte[] byteResult = new byte[nTextLen + 2];

		// 第一位为校验位，需要通过第二位校验
		byteResult[0] = 0;
		for (int j = 0; j < nKeyLen; j++) {
			byteResult[0] = (byte) (byteResult[0] + byteKey[j]);
		}
		byteResult[0] = (byte) (byteResult[0] + Rand);
		// 第二位为随机数
		byteResult[1] = Rand;
		for (int i = 0; i < nTextLen; i++) {
			byteResult[i + 2] = (byte) (byteText[i] + byteKey[i % nKeyLen] + Rand);
		}
		return byteResult;
	}
	
	/**
	 * 解密
	 * 
	 * @param strKey
	 * @param byteDate
	 * @return
	 */
	public static String DecryptByteToString(String strKey, byte[] byteDate) {
		if (strKey.length() <= 0 || byteDate.length <= 0)
			return "";
		byte[] byteKey = strKey.getBytes();
		int nKeyLen = byteKey.length;
		byte[] byteResutl = new byte[byteDate.length - 2];

		byte Check = byteDate[0];// 取出校验位
		byte Rand = byteDate[1];// 取出随机数
		byte Cauculate = 0;// 计算值
		for (int j = 0; j < nKeyLen; j++) {
			Cauculate = (byte) (Cauculate + byteKey[j]);
		}
		Cauculate = (byte) (Cauculate + Rand);
		if (Cauculate != Check)
			return "";
		int nDataLen = byteDate.length;
		for (int i = 2; i < nDataLen; i++) {
			byteResutl[i - 2] = (byte) (byteDate[i] - byteKey[(i - 2) % nKeyLen] - Rand);
		}

		String strResult = null;
		try {
			strResult = new String(byteResutl, "utf-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return strResult;
	}
	
	// 测试
	public static void main(String[] args) throws UnsupportedEncodingException {
		String key = WebClassConstant.STR_INTERFACE_KEY;
		//String strText = "pukObhQFfsdfGiTHqA"+"+"+DateUtils.parseDateToString(new Date(), null);
		//String strText = "rQXBUcWduZIQZCd+4005998";
		String strText = "dPabdbGDpFTrwwgydV+7711063+1";
		//String strText = "LDllLJVcbGXuHCpfRD+RM-f2ddc2b4122e1405afca5a0cf4c508ec+1";
		// 加密后用base64编码
		System.out.println("密文:" + encrypt(key, strText));
		System.out.println("base64密文:"+ Base64.encodeBase64String(encrypt(key, strText).getBytes()));
		// 解密测试
		System.out.println("明文:" + decrypt(key, encrypt(key, strText)));
		System.out.println("==========================================");
		String encyptStr = "Q1lJU0J6MDRGQmtrRnhzV05DME5EMGcvRlF6OUJ4UHdOREFwTVFEc0dqQkI2djMrUFF6M0tnVHVLUFVHTGZrQ0JCcnYvdzhaOXkwRENnPT0=";
		String base64decStr = new String(Base64.decodeBase64(encyptStr), "UTF-8");
		System.out.println("base64解码后:" + base64decStr);
		System.out.println("解密后:" + decrypt(key, base64decStr));
	}
}
